// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainClient is the client API for Chain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainClient interface {
	// Node -> Master - Request the tail of the chain to determine whether the node needs to replicate data before joining
	GetTail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (*TailResponse, error)
	// Node -> Master - We have the data, let's join the chain
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*OkResponse, error)
	// Master -> Node - Inform a Node of its new neighbours
	UpdateNeighbours(ctx context.Context, in *NeighbourInfo, opts ...grpc.CallOption) (*OkResponse, error)
}

type chainClient struct {
	cc grpc.ClientConnInterface
}

func NewChainClient(cc grpc.ClientConnInterface) ChainClient {
	return &chainClient{cc}
}

func (c *chainClient) GetTail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (*TailResponse, error) {
	out := new(TailResponse)
	err := c.cc.Invoke(ctx, "/protos.Chain/GetTail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, "/protos.Chain/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainClient) UpdateNeighbours(ctx context.Context, in *NeighbourInfo, opts ...grpc.CallOption) (*OkResponse, error) {
	out := new(OkResponse)
	err := c.cc.Invoke(ctx, "/protos.Chain/UpdateNeighbours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainServer is the server API for Chain service.
// All implementations must embed UnimplementedChainServer
// for forward compatibility
type ChainServer interface {
	// Node -> Master - Request the tail of the chain to determine whether the node needs to replicate data before joining
	GetTail(context.Context, *TailRequest) (*TailResponse, error)
	// Node -> Master - We have the data, let's join the chain
	Join(context.Context, *JoinRequest) (*OkResponse, error)
	// Master -> Node - Inform a Node of its new neighbours
	UpdateNeighbours(context.Context, *NeighbourInfo) (*OkResponse, error)
	mustEmbedUnimplementedChainServer()
}

// UnimplementedChainServer must be embedded to have forward compatible implementations.
type UnimplementedChainServer struct {
}

func (UnimplementedChainServer) GetTail(context.Context, *TailRequest) (*TailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTail not implemented")
}
func (UnimplementedChainServer) Join(context.Context, *JoinRequest) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChainServer) UpdateNeighbours(context.Context, *NeighbourInfo) (*OkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNeighbours not implemented")
}
func (UnimplementedChainServer) mustEmbedUnimplementedChainServer() {}

// UnsafeChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainServer will
// result in compilation errors.
type UnsafeChainServer interface {
	mustEmbedUnimplementedChainServer()
}

func RegisterChainServer(s grpc.ServiceRegistrar, srv ChainServer) {
	s.RegisterService(&Chain_ServiceDesc, srv)
}

func _Chain_GetTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).GetTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chain/GetTail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).GetTail(ctx, req.(*TailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chain/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain_UpdateNeighbours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighbourInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainServer).UpdateNeighbours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Chain/UpdateNeighbours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainServer).UpdateNeighbours(ctx, req.(*NeighbourInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Chain_ServiceDesc is the grpc.ServiceDesc for Chain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Chain",
	HandlerType: (*ChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTail",
			Handler:    _Chain_GetTail_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Chain_Join_Handler,
		},
		{
			MethodName: "UpdateNeighbours",
			Handler:    _Chain_UpdateNeighbours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/chain.proto",
}
